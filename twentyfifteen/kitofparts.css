/**
general things that should apply everywhere and anywhere and will often be reused or chained together for specific needs
**/

/**
a lot of this comes from this
https://github.com/OOKB/gridtastic-lite/
https://github.com/OOKB/gridtastic-lite/blob/master/structure.less

and read more on some important ideas/stylistic direction at BASSCSS
http://www.basscss.com/
**/

*    { box-sizing: inherit; }
html { box-sizing: border-box; }

.clearfix::after {
    content: "";
    clear: both;
    display: block;
}

/** mini CSS modules **/

/* colors from basscss */
.black{color:#111}
.gray{color:#aaa}
.silver{color:#ddd}
.white{color:#fff}
.aqua{color:#7fdbff}
.blue{color:#0074d9}
.navy{color:#001f3f}
.teal{color:#39cccc}
.green{color:#2ecc40}
.olive{color:#3d9970}
.lime{color:#01ff70}
.yellow{color:#ffdc00}
.orange{color:#ff851b}
.red{color:#ff4136}
.fuchsia{color:#f012be}
.purple{color:#b10dc9}
.maroon{color:#85144b}
.color-inherit{color:inherit}
.muted{opacity:.5}

.bg-black{background-color:#111}
.bg-gray{background-color:#aaa}
.bg-silver{background-color:#ddd}
.bg-white{background-color:#fff}
.bg-aqua{background-color:#7fdbff}
.bg-blue{background-color:#0074d9}
.bg-navy{background-color:#001f3f}
.bg-teal{background-color:#39cccc}
.bg-green{background-color:#2ecc40}
.bg-olive{background-color:#3d9970}
.bg-lime{background-color:#01ff70}
.bg-yellow{background-color:#ffdc00}
.bg-orange{background-color:#ff851b}
.bg-red{background-color:#ff4136}
.bg-fuchsia{background-color:#f012be}
.bg-purple{background-color:#b10dc9}
.bg-maroon{background-color:#85144b}

/* Visibility Classes */
.show {
  display: block !important;
}
.hidden {
  display: none !important;
}
.invisible {
  visibility: hidden;
}

.visible-lg,
.hidden-sm {
  display: none;
  visibility: hidden;
}

.hide-text {
  text-indent: 200%;
  white-space: nowrap;
  overflow: hidden;
}

.show-text {
  text-indent: 0%;
  white-space: normal;
  overflow: visible;
}

/* border stuff */
.border-top    { border-top:    1px solid currentColor; }
.border-right  { border-right:  1px solid currentColor; }
.border-bottom { border-bottom: 1px solid currentColor; }
.border-left   { border-left:   1px solid currentColor; }

.bw2 { border-width: 2px; }
.bw3 { border-width: 3px; }
.bw4 { border-width: 4px; }
.bw5 { border-width: 5px; }

.btw2 { border-top-width: 2px; }
.btw3 { border-top-width: 3px; }
.btw4 { border-top-width: 4px; }
.btw5 { border-top-width: 5px; }

.static   { position:   static; }
.relative { position: relative; }
.absolute { position: absolute; }
.fixed    { position:    fixed; }

.t0        { top:    0; }
.r0        { right:  0; }
.b0        { bottom: 0; }
.l0        { left:   0; }

.mlrauto {
  margin-left: auto;
  margin-right: auto;
}

.mt5px { margin-top: 5px; }

.pt5px { padding-top: 5px; }

.z999 {
  z-index: 999;
}

.allcaps,
.uppercase {
  text-transform: uppercase;
}
.fullwidth,
.w100 {
  width: 100%;
}
.cover {
  margin: 0;
  padding: 0;
}

/** grid **/
.columns {
  box-sizing: border-box;
  position: relative;
  min-height: 1px;
  /** padding of .75em on each side creates nice 1.5em gutters that then will get biggere/smaller as type sizes increase/decrease **/
  padding-right: .75em;
  padding-left: .75em;
  line-height: 1.5em;
  /** allows for better "adaptive" styling AND matching of gutter widths to line-heights **/
}

@media (min-width: 768px) {
  /* columnar stuff */
  .column,
  .columns {
    float: left;
  }

  /* the Grid
  ===========================================*/
  /*
    widths are set using CSS calc() function
    width: calc(100% / x * y);
    where x = #of columns total, and y = #of columns the class crosses.
    by default this has been set as a 12 column grid, so x = 12.
    y matches numerically the class number.
  */
  .one                   { width: calc(100% / 12 * 01); }
  .two                   { width: calc(100% / 12 * 02); }
  .three,
  .quarter,
  .onequarter            { width: calc(100% / 12 * 03); }
  .four                  { width: calc(100% / 12 * 04); }
  .five                  { width: calc(100% / 12 * 05); }
  .six,
  .half,
  .halfwidth             { width: calc(100% / 12 * 06); }
  .seven                 { width: calc(100% / 12 * 07); }
  .eight                 { width: calc(100% / 12 * 08); }
  .nine                  { width: calc(100% / 12 * 09); }
  .ten                   { width: calc(100% / 12 * 10); }
  .eleven                { width: calc(100% / 12 * 11); }
  .twelve,
  .fullwidth             { width: calc(100% / 12 * 12); }
  /*
    you can easily add more columns (or remove columnes) by
    changing 12 to the number of total columns you want, and then
    add additional classes for the extra columns...
    like if you want 16 column base grid, you'd get something like
    width: calc(100% / x * y);
    x would be 16
    width: calc(100% / 16 * #columnsSpanned);
    make sense?
  */

  /* some standard offsets */
  .offset-by-one         { margin-left: calc(100% / 12 * 01); }
  .offset-by-two         { margin-left: calc(100% / 12 * 02); }
  .offset-by-three       { margin-left: calc(100% / 12 * 03); }
  .offset-by-four        { margin-left: calc(100% / 12 * 04); }
  .offset-by-five        { margin-left: calc(100% / 12 * 05); }
  .offset-by-six,
  .offset-by-half        { margin-left: calc(100% / 12 * 06); }
  .offset-by-seven       { margin-left: calc(100% / 12 * 07); }
  .offset-by-eight       { margin-left: calc(100% / 12 * 08); }
  .offset-by-nine        { margin-left: calc(100% / 12 * 09); }
  .offset-by-ten         { margin-left: calc(100% / 12 * 10); }
  .offset-by-eleven      { margin-left: calc(100% / 12 * 11); }
  .offset-by-twelve      { margin-left: calc(100% / 12 * 12); }

  .visible-lg {
    display: block;
    visibility: visible;
  }
  .visible-sm,
  .hidden-lg {
    display: none;
    visibility: hidden;
  }
}
